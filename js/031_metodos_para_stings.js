console.log("**** Propiedad .length ****");
/* Propiedad
 * üìå .length
 * - Devuelve el n√∫mero de caracteres de una cadena de texto.
 */

const texto = "¬°Hola mundo!";
console.log(texto.length);

console.log("**** M√©todo .indexOf() .lastIndexOf() ****");
/*
 * üìå .slice(start, end)
 * - Extrae una secci√≥n de una cadena y devuelve una nueva cadena sin modificar la cadena original.
 * - 'start': El √≠ndice base cero en el que comienza la extracci√≥n.
 * - 'end': (Opcional) El √≠ndice base cero antes del cual terminar la extracci√≥n.
 */

const resultado = texto.slice(1, 5);
console.log(resultado); // Output: Hola

console.log("**** M√©todo .slice() ****");

/*
 * üìå .slice()
 * - El m√©todo .slice() es usado para extraer una secci√≥n de una cadena de texto sin modificar la cadena original.
 * - Devuelve una nueva cadena de texto que contiene los caracteres de la cadena original desde el √≠ndice proporcionado
 *   en el primer par√°metro hasta el √≠ndice proporcionado en el segundo par√°metro (no incluido).
 * - 1er par√°metro (obligatorio): El √≠ndice desde donde queremos empezar a cortar.
 * - 2do par√°metro (opcional): El √≠ndice hasta donde queremos cortar (este √≠ndice no se incluye en el resultado).
 *   Si se omite este par√°metro, se extraer√° hasta el final de la cadena.
 */

// Encuentra el √≠ndice de la letra 'm' en la cadena 'texto'
const index = texto.indexOf("m");

// Encuentra el √∫ltimo √≠ndice de la letra 'o' en la cadena 'texto'
const lastIndex = texto.lastIndexOf("o");

// Usa .slice() para cortar la cadena desde el √≠ndice de 'm' hasta el √≠ndice de 'o' + 1
// El +1 es necesario porque el segundo par√°metro del m√©todo .slice() no se incluye en el resultado.
// As√≠ que al agregar +1, estamos incluyendo la letra 'o' en la nueva cadena.
console.log(texto.slice(index, lastIndex + 1)); // salida: "mundo"
